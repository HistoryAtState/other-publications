# This workflow builds a xar archive, deploys it into exist and execute a simple smoke test.
# It also includes code for using semantic-release to upload packages as part of GitHub releases
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions
# For node free automated release see https://trstringer.com/github-actions-create-release-upload-artifacts/ 

name: exist-db CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
       fail-fast: false
       matrix:
        # 7.0.0-SNAPSHOT and 6.2.1 created
         exist-version: [latest, release]
         java-version: [11, 17]
         exclude:
           - exist-version: release
             java-version: 17
           - exist-version: latest
             java-version: 11

    steps:
      # Checkout code
      - uses: actions/checkout@v4
      - name: Install Test Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils bats
      # sanity check
      # TODO(DP) Validate ?
      - name: Ensure all XML files are well-formed
        run: |
          xmllint --noout \
            $(find . -type f -name '*.xml')

      # Build 
      - name: Build Expath Package
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java-version }}
      - run: ant

      # Install
      - name: Start exist-ci containers
        run: |
          docker run -dit -p 8080:8080 -v ${{ github.workspace }}/build:/exist/autodeploy \
          --name exist --rm --health-interval=2s --health-start-period=4s \
          duncdrum/existdb:${{ matrix.exist-version }}
          sleep 10s

      # Test       
      - name: Run test
        run: bats --tap test/*.bats

      # Lint commit messages
      - name: lint commit message
        uses: wagoid/commitlint-github-action@v6

      # Get all changed files in current commit
      - uses: actions/checkout@v3
        with:
            fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}
      - name: Get changed files
        if: ${{matrix.java-version == 17 && github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        id: changed-files
        run: |
            if ${{ github.event_name == 'pull_request' }}; then
                echo "changed_files=$(git diff --name-only -r HEAD^1 HEAD | xargs)" >> $GITHUB_OUTPUT
            else
                echo "changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
            fi
      - name: Create xml files in .last-modified folder
        if: ${{matrix.java-version == 17 && github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: |
            for file in ${{ steps.changed-files.outputs.changed_files }}; do
              # Skip files in hidden folders (starting with .)
              if [[ "$file" =~ ^\..*/ ]]; then
                continue
              fi
              
              if [ ! -f "$file" ]; then
                  echo "Error: File '$file' does not exist" >&2
                  return 1
              fi
              
              # Get last commit date in ISO format    
              if ! iso=$(git log -1 --format=%cd --date=format-local:'%Y-%m-%dT%H:%M:%S%z' "$file"); then
                  echo "Error: Failed to get git log for '$file'" >&2
                  return 1
              fi
              if ! datetime=$(git log -1 --format=%cd --date=iso-strict-local "$file"); then
                  echo "Error: Failed to get git log for '$file'" >&2
                  return 1
              fi
          
              # Create output directory structure
              dir=$(dirname ".last-modified/$file")
              if ! mkdir -p "$dir"; then
                  echo "Error: Failed to create directory '$dir'" >&2
                  return 1
              fi
              
              # Replace any forward slashes in path with underscores for xml:id
              xml_id=${file//\//0x2F}
              
              # Convert date to seconds since epoch
              if [[ "$OSTYPE" == "darwin"* ]]; then
                  if ! seconds_since_epoch=$(date -j -f "%Y-%m-%dT%H:%M:%S%z" "$iso" "+%s"); then
                      echo "Error: Failed to convert date for '$file'" >&2
                      return 1
                  fi
              else
                  if ! seconds_since_epoch=$(date -d "$iso" +%s); then
                      echo "Error: Failed to convert date for '$file'" >&2
                      return 1
                  fi
              fi
              
              # Write XML files
              if ! echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > ".last-modified/$file"; then
                  echo "Error: Failed to write XML header for '$file'" >&2
                  return 1
              fi
              
              if ! echo "<last-modified xml:id=\"$xml_id\" seconds_since_epoch=\"$seconds_since_epoch\">$datetime</last-modified>" >> ".last-modified/$file"; then
                  echo "Error: Failed to write XML content for '$file'" >&2
                  return 1
              fi
              echo "Successfully created .last-modified/$file"
            done
      - name: Commit and Push
        if: ${{matrix.java-version == 17 && github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add .last-modified/
          git commit -m "fix: updated .last-modified [skip ci]" || echo "No changes to commit"
          git push
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: lts/*
      - name: Install dependencies
        run: npm ci --no-optional
      - name: Perform Release
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
        run: npx semantic-release
        # TODO(DP): 
        #   - add secrets to github
        #   - publish to public repo?
